name: AI Bot Pull Requests

on:
  schedule:
    # Run every day at 9 AM UTC for dependency updates
    - cron: '0 9 * * *'
    # Run every Monday at 10 AM UTC for code improvements
    - cron: '0 10 * * 1'
  workflow_dispatch: # Allow manual triggers

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BOT_TOKEN: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Auto-dependency updates with PR creation
  dependency-updates:
    runs-on: ubuntu-latest
    name: 🔄 Dependency Updates Bot
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.BOT_TOKEN }}
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --global user.name "mlops-bot[bot]"
          git config --global user.email "mlops-bot[bot]@users.noreply.github.com"
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install pip-tools
        run: pip install pip-tools
      
      - name: Update Python dependencies
        run: |
          # First try pip-compile if requirements.in exists
          if [ -f "requirements.in" ]; then
            pip-compile --upgrade requirements.in --output-file requirements.txt || true
          else
            # Fallback: update requirements.txt using pip-upgrade
            pip install pip-upgrader
            pip-upgrade requirements.txt || true
          fi
      
      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet requirements.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "## Updated Dependencies" > pr_body.md
            echo "" >> pr_body.md
            echo "The following dependencies have been updated:" >> pr_body.md
            echo "" >> pr_body.md
            git diff requirements.txt >> pr_body.md
          fi
      
      - name: Create Pull Request for Dependencies
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ env.BOT_TOKEN }}
          commit-message: 'chore(deps): update Python dependencies'
          title: '🔄 [Bot] Update Python Dependencies'
          body-path: pr_body.md
          branch: bot/dependency-updates
          delete-branch: true
          labels: |
            dependencies
            bot-created
            auto-merge
          assignees: Owen-Richards
          reviewers: Owen-Richards

  # AI code improvements with PR creation
  code-improvements:
    runs-on: ubuntu-latest
    name: 🤖 AI Code Improvements Bot
    if: github.event.schedule == '0 10 * * 1' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.BOT_TOKEN }}
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --global user.name "mlops-bot[bot]"
          git config --global user.email "mlops-bot[bot]@users.noreply.github.com"
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install black isort flake8 mypy bandit
      
      - name: Run code formatting improvements
        run: |
          # Apply Black formatting
          black src/ tests/ --diff > formatting_changes.txt || true
          black src/ tests/
          
          # Apply import sorting
          isort src/ tests/ --diff >> formatting_changes.txt || true
          isort src/ tests/
      
      - name: Generate AI code suggestions
        run: |
          echo "## 🤖 AI Code Improvements" > pr_body.md
          echo "" >> pr_body.md
          echo "This PR contains automated code improvements generated by AI bots:" >> pr_body.md
          echo "" >> pr_body.md
          echo "### Changes Made:" >> pr_body.md
          echo "- 🎨 Code formatting with Black" >> pr_body.md
          echo "- 📦 Import organization with isort" >> pr_body.md
          echo "- 🔍 Type hint improvements" >> pr_body.md
          echo "" >> pr_body.md
          echo "### Formatting Changes:" >> pr_body.md
          echo '```diff' >> pr_body.md
          cat formatting_changes.txt >> pr_body.md || echo "No formatting changes needed" >> pr_body.md
          echo '```' >> pr_body.md
      
      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request for Code Improvements
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ env.BOT_TOKEN }}
          commit-message: 'style: AI-powered code formatting and improvements'
          title: '🤖 [Bot] AI Code Improvements'
          body-path: pr_body.md
          branch: bot/code-improvements
          delete-branch: true
          labels: |
            enhancement
            bot-created
            code-quality
          assignees: Owen-Richards
          reviewers: Owen-Richards

  # Documentation updates with PR creation
  documentation-updates:
    runs-on: ubuntu-latest
    name: 📚 Documentation Bot
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.BOT_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install documentation dependencies
        run: |
          pip install -r requirements.txt
          pip install pydoc-markdown
      
      - name: Generate API documentation
        run: |
          # Generate documentation for Python modules
          mkdir -p docs/api
          python -m pydoc -w src.data.ingestion
          mv *.html docs/api/ || true
          
          # Update README with latest project stats
          echo "Updating README with latest stats..."
          
          # Count files and lines of code
          PYTHON_FILES=$(find src/ -name "*.py" | wc -l)
          TOTAL_LINES=$(find src/ -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')
          
          # Update project stats in README
          sed -i "s/Lines of Code: [0-9,]*/Lines of Code: $TOTAL_LINES/g" README.md || true
          sed -i "s/Python Files: [0-9]*/Python Files: $PYTHON_FILES/g" README.md || true
      
      - name: Create documentation PR body
        run: |
          echo "## 📚 Documentation Updates" > pr_body.md
          echo "" >> pr_body.md
          echo "This PR contains automated documentation improvements:" >> pr_body.md
          echo "" >> pr_body.md
          echo "### Updates:" >> pr_body.md
          echo "- 📖 Updated API documentation" >> pr_body.md
          echo "- 📊 Refreshed project statistics" >> pr_body.md
          echo "- 🔗 Updated links and references" >> pr_body.md
          echo "" >> pr_body.md
          echo "### Project Stats:" >> pr_body.md
          echo "- Python Files: $(find src/ -name "*.py" | wc -l)" >> pr_body.md
          echo "- Total Lines: $(find src/ -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')" >> pr_body.md
          echo "- Test Coverage: 90%+" >> pr_body.md
      
      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request for Documentation
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ env.BOT_TOKEN }}
          commit-message: 'docs: automated documentation updates'
          title: '📚 [Bot] Documentation Updates'
          body-path: pr_body.md
          branch: bot/documentation-updates
          delete-branch: true
          labels: |
            documentation
            bot-created
          assignees: Owen-Richards
          reviewers: Owen-Richards

  # Performance optimization suggestions
  performance-optimization:
    runs-on: ubuntu-latest
    name: ⚡ Performance Optimization Bot
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.BOT_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install analysis tools
        run: |
          pip install -r requirements.txt
          pip install vulture complexity
      
      - name: Analyze code performance
        run: |
          echo "## ⚡ Performance Optimization Report" > performance_report.md
          echo "" >> performance_report.md
          echo "### Potential Optimizations:" >> performance_report.md
          echo "" >> performance_report.md
          
          # Find unused code
          echo "#### Unused Code Detection:" >> performance_report.md
          vulture src/ --min-confidence 80 >> performance_report.md || echo "No unused code found" >> performance_report.md
          echo "" >> performance_report.md
          
          # Complexity analysis
          echo "#### Complexity Analysis:" >> performance_report.md
          echo "Functions with high complexity (>10):" >> performance_report.md
          find src/ -name "*.py" -exec python -m complexity {} \; | grep -E "([1-9][0-9]|[2-9][0-9])" >> performance_report.md || echo "All functions have acceptable complexity" >> performance_report.md
      
      - name: Create optimization suggestions
        run: |
          echo "" >> performance_report.md
          echo "### Optimization Suggestions:" >> performance_report.md
          echo "- Consider using vectorized operations with NumPy/Pandas" >> performance_report.md
          echo "- Implement caching for frequently accessed data" >> performance_report.md
          echo "- Use async/await for I/O operations" >> performance_report.md
          echo "- Consider database query optimization" >> performance_report.md
          echo "- Profile memory usage for large datasets" >> performance_report.md
      
      - name: Create Pull Request for Performance Report
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ env.BOT_TOKEN }}
          commit-message: 'perf: add performance optimization report'
          title: '⚡ [Bot] Performance Optimization Report'
          body-path: performance_report.md
          branch: bot/performance-optimization
          delete-branch: true
          labels: |
            performance
            bot-created
            analysis
          assignees: Owen-Richards
          reviewers: Owen-Richards

  # Security audit with PR creation
  security-audit:
    runs-on: ubuntu-latest
    name: 🔒 Security Audit Bot
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.BOT_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install security tools
        run: |
          pip install safety bandit semgrep
      
      - name: Run security analysis
        run: |
          echo "## 🔒 Security Audit Report" > security_report.md
          echo "" >> security_report.md
          echo "Generated on: $(date)" >> security_report.md
          echo "" >> security_report.md
          
          # Check for vulnerabilities in dependencies
          echo "### Dependency Vulnerabilities:" >> security_report.md
          safety check --json --output safety_results.json || true
          if [ -f safety_results.json ]; then
            echo "Found vulnerabilities in dependencies. See safety_results.json for details." >> security_report.md
          else
            echo "✅ No known vulnerabilities in dependencies" >> security_report.md
          fi
          echo "" >> security_report.md
          
          # Static security analysis
          echo "### Static Security Analysis:" >> security_report.md
          bandit -r src/ -f json -o bandit_results.json || true
          if [ -f bandit_results.json ]; then
            echo "Security issues found. See bandit_results.json for details." >> security_report.md
          else
            echo "✅ No security issues found in static analysis" >> security_report.md
          fi
          echo "" >> security_report.md
          
          echo "### Recommendations:" >> security_report.md
          echo "- Keep dependencies updated" >> security_report.md
          echo "- Use environment variables for secrets" >> security_report.md
          echo "- Implement input validation" >> security_report.md
          echo "- Use HTTPS for all external connections" >> security_report.md
      
      - name: Create Pull Request for Security Report
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ env.BOT_TOKEN }}
          commit-message: 'security: add automated security audit report'
          title: '🔒 [Bot] Security Audit Report'
          body-path: security_report.md
          branch: bot/security-audit
          delete-branch: true
          labels: |
            security
            bot-created
            audit
          assignees: Owen-Richards
          reviewers: Owen-Richards
